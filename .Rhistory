a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
coef(y.glm)
count<-cigbutts$count
distance <- cigbutts$distance
log_likelihoodValues <- log( dpois(count, lambda = exp(a + b*distance)))
log_likelihoodValues
N <- 40
# x = distance, y = cigbutts
simloglike <- function(x, y.glm, N=40) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y ~ x, family = poisson) # family will change accordin
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
log_likelihoodValues <- log(dpois(y, lambda = exp(a + b*x)))
ll[j, ] <- log_likelihoodValues
}
ll <- data.frame(ll)
names(ll) <- ""
ll # this containes the MLE for each observation from all the simulated
}
ciglike <- with(cigbutts, simloglike(distance, y.glm))
par(mar=c(1, 4, .1,.1))
boxplot(ciglike, ylim=range(c(log_likelihoodValues,ciglike)))
points(log_likelihoodValues, pch=16, col=2)
ciglike
head(ciglike)
cigbutts
dpois(count, lambda = exp(a + b*distance)
)
count
dpois(1, lambda = 0.5)
dpois(2, lambda = 0.5)
dpois(12, lambda = 0.5)
dpois(.2, lambda = 0.5)
dpois(0, lambda = 0.5)
dpois(1, lambda = 0.5)
dpois(count, lambda = exp(a + b*distance)
)
ls()
y.glm
y.glm$sim_1
y <- simulate(y.glm)$sim_1
y
simulate(y.glm)$sim_1
count
simulate(y.glm)$sim_1
simulate(y.glm)$sim_1
simulate(y.glm)$sim_1
simloglike(distance, y.glm)
ncol(simloglike(distance, y.glm))
?qr
install.packages('ADVICE')
library(ADVICE)
ls()
?ADVICE
??ADVICE
?solve
?diag
getwd()
##Q2
#a)
data(iris)
head(iris)
N = nrow(iris)
N
mu = mean(iris$Petal.Length)
mu
sigma2 = var(iris$Petal.Length)
sigma2
#b)
set.seed(96503032)
iris.sample = sample(iris$Petal.Length, 90)
muhat = mean(iris.sample)
muhat
sigma2hat = var(iris.sample)
sigma2hat
#b)
set.seed(96503032)
iris.sample = sample(iris$Petal.Length, 90, replace = FALSE)
muhat = mean(iris.sample)
muhat
sigma2hat = var(iris.sample)
sigma2hat
#d)
cv = c(qnorm((1-0.95)/2), qnorm((1-0.95)/2,lower.tail = FALSE))
cv
#d)
n=90
cv = c(qnorm((1-0.95)/2), qnorm((1-0.95)/2,lower.tail = FALSE))
cv
CI = muhat + cv*sqrt((1-n/N)*(sigma2hat/n))
CI
#f)
dpylr::between(1, 2, 3)
#f)
dplylr::between(1, 2, 3)
#f)
dplyr::between(1, 2, 3)
#f)
dplyr::between(2.5, 2, 3)
#f)
dplyr::between(mu, CI[1], CI[2])
#g)
0.95*30
#g)
1-0.95*30
#g)
30-0.95*30
##Q3
N.UW = 31380
N.UT = 43375
N = N.UW + N.UT
#a)
Nh.UW = N.UW/N
Nh.UW
Nh.UT = N.UT/N
Nh.UT
N
##Q3
Nh.UW = 31380
Nh.UT = 43375
N = Nh.UW + Nh.UT
#a)
Wh.UW = N.UW/N
Wh.UW
Wh.UT = N.UT/N
##Q3
Nh.UW = 31380
Nh.UT = 43375
N = Nh.UW + Nh.UT
#a)
Wh.UW = Nh.UW/N
Wh.UW
Wh.UT = Nh.UT/N
Wh.UT
nh.UW = 200
nh.UT = 300
n = nh.UW + nh.UT
n
wh.UW = nh.UW/n
wh.UW
wh.UT = nh.UT/n
wh.UT
#c)
prop.UW = n*Wh.UW
prop.UW
prop.UT = n*Wh.UT
prop.UT
#d)
ph.UW = 150
ph.UT = 70
phat.strat = Wh.UW*ph.UW + Wh.UT*ph.UT
phat.strat
#d)
muh.UW = 150
muh.UT = 70
muhat.strat = Wh.UW*muh.UW + Wh.UT*muh.UT
muhat.strat
#e)
cv
cv = c(qnorm((1-0.95)/2), qnorm((1-0.95)/2,lower.tail = FALSE))
cv
#e)
cv
cv = c(qnorm((1-0.95)/2), qnorm((1-0.95)/2,lower.tail = FALSE))
##Q3
Nh.UW = 31380
Nh.UT = 43375
N = Nh.UW + Nh.UT
N
#a)
Wh.UW = Nh.UW/N
Wh.UW
Wh.UT = Nh.UT/N
Wh.UT
nh.UW = 200
nh.UT = 300
n = nh.UW + nh.UT
n
wh.UW = nh.UW/n
wh.UW
wh.UT = nh.UT/n
wh.UT
#c)
prop.UW = n*Wh.UW
prop.UW
prop.UT = n*Wh.UT
prop.UT
#d)
muh.UW = 150
muh.UT = 70
muhat.strat = Wh.UW*muh.UW + Wh.UT*muh.UT
muhat.strat
#e)
cv
nh = c(nh.UW, nh.UT)
Nh = c(Nh.UW, Nh.UT)
#e)
cv
nh = c(nh.UW, nh.UT)
Nh = c(Nh.UW, Nh.UT)
Wh = c(Wh.UW, Wh.UT)
muh = c(muh.UW, muh.UT)
#getting variance
fh = nh/Nh
var.str = sum((1-fh) * Wh^2 * (muh*(1-muh)/(nh-1)))
var.str
sigma2hat = c(10, 20)
#getting variance
var.str = sum(Wh^2 * (1-(nh/Nh)) * (sigma2hat/nh))
var.str
#CI
CI = muhat + cv*sqrt(var.str)
CI
#CI
CI = muhat.strat + cv*sqrt(var.str)
CI
##Q2
#a)
data(iris)
N = nrow(iris)
N
mu = mean(iris$Petal.Length)
mu
sigma2 = var(iris$Petal.Length)
sigma2
#b)
set.seed(96503032)
iris.sample = sample(iris$Petal.Length, 90, replace = FALSE)
muhat = mean(iris.sample)
muhat
sigma2hat = var(iris.sample)
sigma2hat
#d)
n=90
cv = c(qnorm((1-0.95)/2), qnorm((1-0.95)/2,lower.tail = FALSE))
cv
CI = muhat + cv*sqrt((1-n/N)*(sigma2hat/n))
CI
#f)
dplyr::between(mu, CI[1], CI[2])
#g)
30-0.95*30
##Q3
Nh.UW = 31380
Nh.UT = 43375
N = Nh.UW + Nh.UT
N
#a)
Wh.UW = Nh.UW/N
Wh.UW
Wh.UT = Nh.UT/N
Wh.UT
nh.UW = 200
nh.UT = 300
n = nh.UW + nh.UT
n
wh.UW = nh.UW/n
wh.UW
wh.UT = nh.UT/n
wh.UT
#c)
prop.UW = n*Wh.UW
prop.UW
prop.UT = n*Wh.UT
prop.UT
#d)
muh.UW = 150
muh.UT = 70
muhat.strat = Wh.UW*muh.UW + Wh.UT*muh.UT
muhat.strat
#e)
cv
nh = c(nh.UW, nh.UT)
Nh = c(Nh.UW, Nh.UT)
Wh = c(Wh.UW, Wh.UT)
muh = c(muh.UW, muh.UT)
sigma2hat = c(10, 20)
#getting variance
var.str = sum(Wh^2 * (1-(nh/Nh)) * (sigma2hat/nh))
var.str
#CI
CI = muhat.strat + cv*sqrt(var.str)
CI
1-2*0.2
knitr::opts_chunk$set(echo = TRUE)
library(boot)
set.seed(1413)
mytrimmedmean = function(x,i){mean(x[i], trim=0.2)}
q2a = boot(x, mytrimmedmean, 1000)
q2a
x <- c(78, 86, 97, 91, 83, 89, 92, 88, 79, 68)
q2a = boot(x, mytrimmedmean, 1000)
q2a
summary(q2a)
criticalvalues = c(qnorm(0.9/2, lower.tail = TRUE),
qnorm(0.9/2, lower.tail = FALSE))
criticalvalues
criticalvalues = c(qnorm(1-0.9/2, lower.tail = TRUE),
qnorm(1-0.9/2, lower.tail = FALSE))
criticalvalues = c(qnorm(1-0.9/2, lower.tail = TRUE),
criticalvalues = c(qnorm(1-0.9/2, lower.tail = TRUE),
criticalvalues = c(qnorm(1-0.9/2, lower.tail = TRUE),
qnorm(1-0.9/2, lower.tail = FALSE))
criticalvalues
criticalvalues = c(qnorm(0.1/2, lower.tail = TRUE),
qnorm(0.1/2, lower.tail = FALSE))
criticalvalues
q2a
str(q2a)
sd(q2a$t)
mytrimmedmean(x)
#install.package("mlbench") if needed
library(mlbench)
data("PimaIndiansDiabetes2", package = "mlbench")
mydata <- PimaIndiansDiabetes2
summary(mydata)
names(mydata)
testing  = mydata
testing  = head(mydata)
testing
testing[-1,]
testing
for (i in names(testing)){
for (j in 1:nrow(testing)){
if (is.na(testing[j, i])){
testing = testing[-j,]
}
}
}
testing
str(testing$insulin)
is.na(testing$insulin[1])
for (i in names(testing)){
for (j in 1:nrow(testing)){
if (is.na(testing[j, i])){
testing = testing[-j,]
}
}
}
testing
500+268
768-374
knitr::opts_chunk$set(echo = TRUE)
?step()
#install.package("mlbench") if needed
library(mlbench)
data("PimaIndiansDiabetes2", package = "mlbench")
mydata <- PimaIndiansDiabetes2
head(mydata)
str(mydata)
lm(mydata$diabetes ~ mydata$glucose)
plot(lm(mydata$diabetes ~ mydata$glucose))
plot(glm(mydata$diabetes ~ mydata$glucose))
plot(glm(mydata$diabetes ~ mydata$glucose, family=binomial))
plot(mydata$diabetes ~ mydata$glucose)
28/7
#DATA543 Quiz 2
#Jonah Edmundson
hortons = read.csv('./Tweets.csv')
getwd()
install.packages("mcmc")
install.packages("hmm")
install.packages("HMM")
exit
#q1
P = matrix(c(0.9, 0.1, 0, 0, 0, 0,
0.1, 0.85, 0.05, 0, 0, 0,
0, 0.1, 0.8, 0.1, 0, 0,
0, 0, 0.1, 0.8, 0.1, 0,
0, 0, 0, 0.1, 0.8, 0.1,
0, 0, 0, 0, 0.1, 0.9), nrow=6)
P
P%*%P%*%P
P%*%P
#q1
P = matrix(c(0.9, 0.1, 0, 0, 0, 0,
0.1, 0.85, 0.05, 0, 0, 0,
0, 0.1, 0.8, 0.1, 0, 0,
0, 0, 0.1, 0.8, 0.1, 0,
0, 0, 0, 0.05, 0.85, 0.1,
0, 0, 0, 0, 0.1, 0.9), nrow=6)
P%*%P
(P%*%P)[2,3]
P
#q1
P = matrix(c(0.9, 0.1, 0, 0, 0, 0,
0.1, 0.85, 0.05, 0, 0, 0,
0, 0.1, 0.8, 0.1, 0, 0,
0, 0, 0.1, 0.8, 0.1, 0,
0, 0, 0, 0.05, 0.85, 0.1,
0, 0, 0, 0, 0.1, 0.9), nrow=6)
P
options(digits=4)
P
#q1
P = matrix(c(0.9, 0.1, 0, 0, 0, 0,
0.1, 0.85, 0.05, 0, 0, 0,
0, 0.1, 0.8, 0.1, 0, 0,
0, 0, 0.1, 0.8, 0.1, 0,
0, 0, 0, 0.05, 0.85, 0.1,
0, 0, 0, 0, 0.1, 0.9), nrow=6, byrow = TRUE)
P
(P%*%P)[2,3]
#q2
#if time-reversible, qP=q should be true
q = matrix(0.2, 0.2, 0.1, 0.1, 0.2, 0.2,
nrow=1, byrow = TRUE)
#q2
#if time-reversible, qP=q should be true
q = matrix(c(0.2, 0.2, 0.1, 0.1, 0.2, 0.2),
nrow=1, byrow = TRUE)
q
q%*%P
q%*%P == q
all.equal(q%*%P, q)
#q2
transm = matrix(c(0.1, 0.2, 0.7,
0.8, 0, 0.2,
0.7, 0.3, 0),
nrow=3, byrow = TRUE)
transm
emm = matrix(c(0.1, 0.1, 0.8, 0,
0.2, 0.2, 0.6, 0,
0.3, 0.1, 0.4, 0.2),
nrow = 3, byrow = TRUE)
emm
obsdata = c(2, 4, 3, 3, 3, 3, 3, 3, 2, 3, 1,
3, 2, 2, 3, 1, 3, 3, 4, 1)
matrix(c(1, 2, 2, 1)/3,2)
#q2
transm = matrix(c(0.1, 0.2, 0.7,
0.8, 0, 0.2,
0.7, 0.3, 0),
nrow=3, byrow = TRUE)
emm = matrix(c(0.1, 0.1, 0.8, 0,
0.2, 0.2, 0.6, 0,
0.3, 0.1, 0.4, 0.2),
nrow = 3, byrow = TRUE)
obsdata = as.character(c(2, 4, 3, 3, 3, 3, 3, 3, 2, 3, 1,
3, 2, 2, 3, 1, 3, 3, 4, 1))
library(HMM)
hmm = initHMM(c("1","2", "3"), c("1","2", "3", "4"),
transProbs=transm,
emissionProbs=emm)
viterbi = viterbi(hmm, obsdata)
print(viterbi)
viterbi
simDataFit = viterbiTraining(hmm, obsdata)
simDataFit
#q3
#a)
q3sim = simHMM(simDataFit$hmm, 10000)
summary(q3sim)
hea(q3sim)
head(q3sim)
head(q3sim$observation)
table(q3sim$observation)
table(q3sim$observation)/length(q3sim$observation)
table(q3sim$states)/length(q3sim$observation)
#q3
#a)
#q3sim = simHMM(simDataFit$hmm, 10000)
#table(q3sim$states)/length(q3sim$observation)
A = t(transm) - diag(rep(1, 3))
A = rbind(A, rep(1,3))
RHS = c(rep(0,3), 1)
pi = qr.solve(A, RHS)
pi
#b)
#from state 1 and 2 --> obs 4 is 0
#multiply state 3 --> obs 4
pi[3]*emm[3,4]
#c)
#if we're in obs 4 at time 1, then the prob of being in
#each hidden state is just emm col 4
#only way to be in obs 4 is by state 3,
#so we are 100% in hidden state 3 to start
#we want probability of STAYING in hidden state 3
#in the next time step
transm[3,3]
1:3
knitr::opts_chunk$set(echo = TRUE)
transm = matrix(c(0, 0, 0.7, 0.3,
0.8, 0, 0.2, 0,
0.7, 0.3, 0, 0,
0.1, 0.1, 0.8, 0),
nrow=4, byrow=TRUE)
emm = matrix(c(0, 0, 0.8, 0, 0.2,
0.2, 0, 0, 0.2, 0.6,
0.3, 0, 0.4, 0, 0.3,
0.7, 0.2, 0, 0.1, 0),
nrow=4, byrow=TRUE)
transm
emm
P%*%(P%*%P)
P = matrix(c(0, 0.5, 0.5,
0.5, 0, 0.5,
0.5, 0.5, 0), nrow=3, byrow = TRUE)
P%*%(P%*%P)
(P%*%P)%*%P
install.packages('Hmisc')
warnings()
install.packages('Hmisc')
install.packages('Hmisc')
library('roxygen2')
ls()
exit
setwd('/home/jonah/mds/openFood_wrappeR/DATA534personal')
